<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <RootNamespace>SpanTools.Generator.Tests</RootNamespace>
    <IsTestProject>true</IsTestProject>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
  </PropertyGroup>

  <PropertyGroup Label="ValueStringBuilder Options">
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <ValueStringBuilder_IncludeAsMemoryMethods>true</ValueStringBuilder_IncludeAsMemoryMethods>
    <ValueStringBuilder_IncludeMaxLengthTracking>true</ValueStringBuilder_IncludeMaxLengthTracking>
    <ValueStringBuilder_Namespace>MyNamespace</ValueStringBuilder_Namespace>
    <ValueStringBuilder_UseJavaStyleFormatting>true</ValueStringBuilder_UseJavaStyleFormatting>
  </PropertyGroup>

  <ItemGroup Label="ValueStringBuilder Options">
    <PackageReference Include="J2N" VersionOverride="2.2.0-alpha-0026" />
  </ItemGroup>

  <PropertyGroup Label="Compilation Options">
    <DefineConstants Condition=" '$(AllowUnsafeBlocks.ToLower())' == 'true' ">$(DefineConstants);FEATURE_COMPILE_UNSAFE</DefineConstants>
    <DefineConstants Condition=" '$(ValueStringBuilder_UseJavaStyleFormatting.ToLower())' == 'true' ">$(DefineConstants);FEATURE_VALUESTRINGBUILDER_USEJAVASTYLEFORMATTING</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Detect if PackageOutputPath was passed explicitly on the command line -->
    <_IsPackageOutputPathOverridden>$([System.Text.RegularExpressions.Regex]::IsMatch('$(MSBuildCommandLineArgs)', '(?i)(?:^|[ ;])[-/]p:PackageOutputPath='))</_IsPackageOutputPathOverridden>
    <_ArtifactsDirectory>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)..\..\_artifacts'))</_ArtifactsDirectory>
    <_NuGetPackageOutputPath>$(_ArtifactsDirectory)\NuGetPackages\$(Configuration)</_NuGetPackageOutputPath>
    <_NuGetPackageOutputPath Condition=" '$(_IsPackageOutputPathOverridden.ToLower())' == 'true' ">$(PackageOutputPath)</_NuGetPackageOutputPath>
    <_PackageVersionPropsFilePath>$(_NuGetPackageOutputPath)\SpanTools.ValueStringBuilder.Generator.Version.props</_PackageVersionPropsFilePath>
    <!-- We install the analyzer package in a local directory so we don't pollute the
          .nuget cache on the dev machine with temporary builds -->
    <RestorePackagesPath>obj/LocalNuGetPackages</RestorePackagesPath>
    <_RestorePackagesPath>$(RestorePackagesPath)/spantools.valuestringbuilder.generator</_RestorePackagesPath>
  </PropertyGroup>

  <PropertyGroup>
    <RestoreSources Condition="Exists('$(_NuGetPackageOutputPath)')">$(RestoreSources);$(_NuGetPackageOutputPath)</RestoreSources>
    <RestoreSources>$(RestoreSources);https://api.nuget.org/v3/index.json</RestoreSources>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Visual Studio blocks MSBuild from being able to check whether files are up-to-date.
          So, we disable that here to gain access to that info. -->
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
  </PropertyGroup>

  <Import Project="$(_PackageVersionPropsFilePath)" Condition="Exists('$(_PackageVersionPropsFilePath)')" />

  <ItemGroup Condition="Exists('$(_PackageVersionPropsFilePath)')">
    <PackageReference Include="SpanTools.ValueStringBuilder.Generator" VersionOverride="$(_SpanToolsPackageVersion)" />
  </ItemGroup>

  <!-- When the generator package is available -->
  <ItemGroup Condition="Exists('$(_PackageVersionPropsFilePath)')">
    <!-- Include all test files -->
    <Compile Include="**\*.cs" Exclude="TestPackageNotBuilt.cs" />
  </ItemGroup>

  <!-- When the generator package is missing -->
  <ItemGroup Condition="!Exists('$(_PackageVersionPropsFilePath)')">
    <!-- Only include the single test file that signals failure -->
    <Compile Include="TestPackageNotBuilt.cs" />
  </ItemGroup>

  <Target Name="EnsureNuGetPackageBuilt" BeforeTargets="PrepareForBuild" Condition="'$(DesignTimeBuild)' != 'true'">

    <Message Importance="high" Text="Running NuGet Package Build..." />

    <!-- Build the project that produces the NuGet package -->
    <MSBuild Projects="..\..\src\SpanTools.ValueStringBuilder.Generator.Package\SpanTools.ValueStringBuilder.Generator.Package.csproj" Targets="Restore;PrepareForBuild;Build" Properties="Configuration=$(Configuration)" />

    <!-- Since we may be continually using the last build number (unless a commit occurred),
          we need to clear the project local NuGet cache. -->
    <ForceDeleteDirectory DirectoryPath="$(_RestorePackagesPath)" />

    <!-- Mark restore data as stale so MSBuild will re-run restore -->
    <Delete Files="$(BaseIntermediateOutputPath)project.assets.json" ContinueOnError="true" />

    <!-- Restore again, now that the .nupkg should exist -->
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Restore" Properties="Configuration=$(Configuration)" />
  </Target>

  <Target Name="CleanRestorePackagesPath" AfterTargets="Clean" Condition="'$(DesignTimeBuild)' != 'true'">
    <ForceDeleteDirectory DirectoryPath="$(_RestorePackagesPath)" />
  </Target>

  <UsingTask TaskName="ForceDeleteDirectory" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <DirectoryPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        try
        {
            if (Directory.Exists(DirectoryPath))
            {
                Directory.Delete(DirectoryPath, recursive: true);
            }
        }
        catch (Exception ex)
        {
            // Swallow all exceptions unless MSBuild wants you to fail
            Log.LogMessage(MessageImportance.Low, $"Failed to delete directory '{DirectoryPath}': {ex.Message}");
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
