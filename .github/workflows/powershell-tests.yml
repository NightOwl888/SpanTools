name: Test Powershell Scripts

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'release/v*.*'       # matches release/v1.2
      - 'release/v*.*.*'     # matches release/v1.2.3
      - 'release-workflow*'  # special branch names for testing release workflow (this file) from a PR
    paths:
    - '**/*.ps1'
    - '**/*.psm1'
    - '**/*.ps1xml'
    - '**/*.pssc'
    - '**/*.cdxml'
    - '**/*.psrc'
    - '**/*.psc1'
  pull_request:
    paths:
    - '**/*.ps1'
    - '**/*.psm1'
    - '**/*.ps1xml'
    - '**/*.pssc'
    - '**/*.cdxml'
    - '**/*.psrc'
    - '**/*.psc1'

# De-duplicate runs
concurrency:
  group: test-powershell-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pester:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Restore PowerShell Dependencies
        shell: pwsh
        run: |
          [string] $pesterVersion = "5.5.0"

          $ErrorActionPreference = 'Stop'
          Set-StrictMode -Version Latest

          # Base module cache outside repo, e.g. ~/.local/share/powershell/Modules
          $baseDir = Join-Path $HOME ".local"
          $shareDir = Join-Path $baseDir "share"
          $pwshDir = Join-Path $shareDir "powershell"
          $modulesPath = Join-Path $pwshDir "Modules"
          $pesterPath = Join-Path $modulesPath "Pester"

          # Ensure the full directory exists
          New-Item -ItemType Directory -Force -Path $modulesPath | Out-Null

          # Add to PSModulePath if not already there
          if (-not ($env:PSModulePath -split [IO.Path]::PathSeparator | Where-Object { $_ -eq $modulesPath })) {
              $env:PSModulePath = "$modulesPath$([IO.Path]::PathSeparator)$env:PSModulePath"
          }

          # Build download paths
          $tempDir = Join-Path ([System.IO.Path]::GetTempPath()) ("pester-" + [guid]::NewGuid())
          $zipFile = Join-Path $tempDir ("Pester-$pesterVersion.zip")
          $pkgUrl  = "https://github.com/pester/Pester/archive/refs/tags/$pesterVersion.zip"

          # Skip if already installed
          if (Test-Path (Join-Path $pesterPath "Pester.psd1")) {
              Write-Host "Pester $pesterVersion already present at: $pesterPath"
              return
          }

          Write-Host "Downloading Pester $pesterVersion..."
          New-Item -ItemType Directory -Force -Path $tempDir | Out-Null
          Invoke-WebRequest -Uri $pkgUrl -OutFile $zipFile -UseBasicParsing

          Write-Host "Extracting package..."
          Expand-Archive -LiteralPath $zipFile -DestinationPath $tempDir -Force

          Write-Host "Copying module files..."
          $extractedDir = Join-Path $tempDir ("Pester-$pesterVersion")
          Copy-Item -Recurse -Force $extractedDir $pesterPath

          # Clean up
          Remove-Item -Recurse -Force $tempDir -ErrorAction SilentlyContinue
          Write-Host "Pester installed locally at: $pesterPath"


      - name: Run Pester Tests
        shell: pwsh
        run: |
          # Imports
          . (Join-Path $env:GITHUB_WORKSPACE 'eng' 'build' 'Markdown-Formatting.ps1')

          $ErrorActionPreference = 'Continue'
          try {
              $testResults = Invoke-Pester -Output Detailed -CI -PassThru
          } catch  {
              Write-Warning "Invoke-Pester threw an exception: $_"
          }
          $ErrorActionPreference = 'Stop'
          Set-StrictMode -Version Latest

          $failed = $false
          $results = @()

          if ($testResults -and $testResults.Containers -and $testResults.Containers.Count -gt 0) {
              foreach ($container in $testResults.Containers) {
                  $suiteName = $container.Item.Name
                  $passedCount = $container.PassedCount
                  $failedCount = $container.FailedCount
                  $skippedCount = $container.SkippedCount

                  $results += [PSCustomObject]@{
                      SuiteName     = $suiteName
                      PassedCount   = [int]$passedCount
                      FailedCount   = [int]$failedCount
                      IgnoredCount  = [int]$skippedCount
                      Crashed       = [bool]$false
                  }

                  if ($failedCount -gt 0) {
                      $failed = $true
                  }
              }
          }

          # Write summary
          Format-Test-Results $results | Add-Content $env:GITHUB_STEP_SUMMARY

          if ($failed) {
              exit 1
          }
